{"version":3,"sources":["AppStyled.js","Components/WeatherFrom.js","Components/WeatherResualt.js","App.js","reportWebVitals.js","index.js"],"names":["Section","Styled","section","Input","input","Submit","button","PInfo","p","WeatherForm","props","method","onSubmit","getWeather","type","name","placeholder","className","WeatherResault","temperature","city","country","humidity","description","erorr","App","state","e","a","preventDefault","target","elements","value","LINK","fetch","api","json","data","setState","main","temp","sys","weather","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qyCAEO,IAAMA,EAAUC,IAAOC,QAAV,KAIPC,EAAQF,IAAOG,MAAV,KAWLC,EAASJ,IAAOK,OAAV,KAkBNC,EAAQN,IAAOO,EAAV,KCpBHC,EAZM,SAACC,GAClB,OACI,cAACV,EAAD,UACI,uBAAMW,OAAO,OAAOC,SAAUF,EAAMG,WAApC,UACI,cAACV,EAAD,CAAOW,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,cAACb,EAAD,CAAOW,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,eAACX,EAAD,WAAQ,mBAAGY,UAAU,2BAArB,oBCkBDC,EAxBQ,SAACR,GAEpB,OACI,eAACV,EAAD,WAEQU,EAAMS,aAAeT,EAAMU,MAAQV,EAAMW,SAAWX,EAAMY,UAAYZ,EAAMa,aAAe,gCACvF,eAAChB,EAAD,2BAAqBG,EAAMS,eAC3B,eAACZ,EAAD,oBAAcG,EAAMU,QACpB,eAACb,EAAD,uBAAiBG,EAAMW,WACvB,eAACd,EAAD,wBAAkBG,EAAMY,YACxB,eAACf,EAAD,2BAAqBG,EAAMa,kBAI/Bb,EAAMc,OACN,8BACI,cAACjB,EAAD,UAAQG,EAAMc,cC0CnBC,E,4MAtDbC,MAAQ,CACNP,YAAa,GACbC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,I,EAGTX,W,uCAAa,WAAOc,GAAP,uBAAAC,EAAA,6DACXD,EAAEE,iBACIT,EAAOO,EAAEG,OAAOC,SAASX,KAAKY,MAC9BX,EAAUM,EAAEG,OAAOC,SAASV,QAAQW,MAC9B,mCACNC,EALK,2DAKsDb,EALtD,cAKgEC,EALhE,kBAIC,oCAJD,SAMOa,MAAMD,GANb,cAMLE,EANK,iBAOQA,EAAIC,OAPZ,QAOLC,EAPK,OAQPjB,GAAQC,EACV,EAAKiB,SAAS,CACZnB,YAAakB,EAAKE,KAAKC,KACvBpB,KAAMiB,EAAKtB,KACXM,QAASgB,EAAKI,IAAIpB,QAClBC,SAAUe,EAAKE,KAAKjB,SACpBC,YAAac,EAAKK,QAAQ,GAAGnB,YAC7BC,MAAO,KAEH,EAAKc,SAAS,CACpBnB,YAAa,GACbC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,4BAvBE,4C,6GA4BX,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAAaX,WAAY8B,KAAK9B,aAC9B,cAAC,EAAD,CACEM,YAAawB,KAAKjB,MAAMP,YACxBC,KAAMuB,KAAKjB,MAAMN,KACjBC,QAASsB,KAAKjB,MAAML,QACpBC,SAAUqB,KAAKjB,MAAMJ,SACrBC,YAAaoB,KAAKjB,MAAMH,YACxBC,MAAOmB,KAAKjB,MAAMF,e,GAhDVoB,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16cac577.chunk.js","sourcesContent":["import Styled from \"styled-components\"\r\n\r\nexport const Section = Styled.section `\r\n    padding: 1rem 0;\r\n`\r\n\r\nexport const Input = Styled.input `\r\n    display: block;\r\n    padding: 10px;\r\n    margin: 2rem 0;\r\n    border-radius: 6px;\r\n    border: none;\r\n    outline: none;\r\n    background: antiquewhite;\r\n    font-size: 18px;\r\n`\r\n\r\nexport const Submit = Styled.button `\r\n    border-radius: 25px;\r\n    border: none;\r\n    color: white;\r\n    background-color: #05e8ba;\r\n    background-image: linear-gradient(315deg,#05e8ba 0%,#087ee1 74%);\r\n    cursor: pointer;\r\n    width: 100%;\r\n    font-weight: bold;\r\n    font-size: 18px;\r\n    padding: 1rem 0;\r\n    text-align: center;\r\n    outline: none;\r\n    transition: all 0.3s ease-in-out;\r\n    &:hover {\r\n        box-shadow: 2px 2px 40px 10px rgb(140 138 209);\r\n    };\r\n`\r\nexport const PInfo = Styled.p `\r\n    color: #fff;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    border-bottom: 1px solid #06d1c2;\r\n    padding-bottom: 5px;\r\n`","import React from 'react';\r\nimport { Input, Section, Submit } from '../AppStyled';\r\n\r\nconst WeatherForm =  (props) => {\r\n    return (\r\n        <Section>\r\n            <form method=\"post\" onSubmit={props.getWeather}>\r\n                <Input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n                <Input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n                <Submit><i className=\"fas fa-snowflake fa-x2\"></i> Weather</Submit>\r\n            </form>\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default WeatherForm;","import React from 'react';\r\nimport { PInfo, Section } from '../AppStyled';\r\n\r\nconst WeatherResault = (props) => {\r\n\r\n    return (\r\n        <Section>\r\n            {\r\n                props.temperature && props.city && props.country && props.humidity && props.description && <div>\r\n                    <PInfo>Temperature: {props.temperature}</PInfo>\r\n                    <PInfo>City: {props.city}</PInfo>\r\n                    <PInfo>Country: {props.country}</PInfo>\r\n                    <PInfo>Humidity: {props.humidity}</PInfo>\r\n                    <PInfo>Description: {props.description}</PInfo>\r\n                </div> \r\n            }\r\n            {\r\n                props.erorr && \r\n                <div>\r\n                    <PInfo>{props.erorr}</PInfo>\r\n                </div> \r\n            }\r\n\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default WeatherResault;","import React, { Component, Fragment } from 'react'\nimport WeatherForm from './Components/WeatherFrom'\nimport WeatherResault from './Components/WeatherResualt'\nimport './AppStyled.js';\n\nclass App extends Component {\n\n  state = {\n    temperature: '',\n    city: '',\n    country: '',\n    humidity: '',\n    description: '',\n    erorr: ''\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    const KEY = '6d3e214283afdd4c3332b2fad92fddea'\n    const LINK = `http://api.openweathermap.org/data/2.5/weather?q=${city}%2C${country}&appid=${KEY}`\n    const api = await fetch(LINK)\n    const data = await api.json()\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        erorr: ''\n      })\n    } else {this.setState({\n      temperature: '',\n      city: '',\n      country: '',\n      humidity: '',\n      description: '',\n      erorr: 'Please Enter Valid Data'\n    })}\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <WeatherForm getWeather={this.getWeather} />\n        <WeatherResault \n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          erorr={this.state.erorr}\n        />\n      </Fragment>\n    )\n  }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}